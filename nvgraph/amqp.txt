
This project implements protocol adaptor for AMQP.
The adaptor implements and exposed the DSMI API for client applications to interface with it.

Dependencies
-------------

* glib 2.0
----------
 sudo apt-get install libglib2.0 libglib2.0-dev

Install rabbitmq-c library
--------------------------
 sudo apt-get install librabbitmq-dev

If you plan to have AMQP broker installed on your local machine
---------------------------------------------------------------
#Install rabbitmq on your ubuntu system: https://www.rabbitmq.com/install-debian.html
#The “Using rabbitmq.com APT Repository” procedure is known to work well

 sudo apt-get install rabbitmq-server

#Ensure rabbitmq service has started by running (should be the case):
 sudo service rabbitmq-server status

#Otherwise
 sudo service rabbitmq-server start

Specify Topic
-------------
#Default topic is deepstream_topic
#You can overwrite it by specifying custom topic name within cfg_amqp.txt.
topic = <topic_name>
#OR topic per message can be specified as part of the argument to send api. This takes the highest precedence
#ex: NvDsMsgApiErrorType nvds_msgapi_send(NvDsMsgApiHandle h_ptr, char *topic, const uint8_t *msg, size_t nbuf);

Share connection
----------------
#share-connection=1
Uncomment the field share-connection in cfg_amqp.txt and set its value to 1
if you need to generate a connection signature. This signature is a unique string
which is generated by parsing all the amqp connection related params
used for making a connection
Uncommenting this field signifies that the connection created can be shared
with other components within the same process.


Specify heartbeat
--------------------------
#amqp-heartbeat=0
Uncomment the field amqp-heartbeat in cfg_amqp.txt and set its value to an integer > 0 to enable the heartbeat protocol.
This integer is the number of seconds between heartbeat frames requested of the broker. After 2 missed frames, rabbitmq
will consider the connection unreachable. A value of 0 disables the heartbeat protocol.


Setup and enable logging:
-------------------------
Before running the sample applications, enable logs by running the logger setup script:
For x86,
 chmod u+x ~/deepstream_x86_public/sources/tools/nvds_logger/setup_nvds_logger.sh
 sudo ~/deepstream_x86_public/sources/tools/nvds_logger/setup_nvds_logger.sh
On Jetson,
 chmod u+x ~/deepstream_sdk_on_jetson/sources/tools/nvds_logger/setup_nvds_logger.sh
 sudo ~/deepstream_sdk_on_jetson/sources/tools/nvds_logger/setup_nvds_logger.sh

Create exchange , queue & and bind queue to exchange:
-----------------------------------------------------

# Rabbitmq management:
It comes with a command line tool which you can use to create/configure all of your queues/exchanges/etc
https://www.rabbitmq.com/management.html

# Install rabbitmq management plugin:
sudo rabbitmq-plugins enable rabbitmq_management

# Use the default exchange amq.topic
OR create an exchange as below, the same name as the one you specify within the cfg_amqp.txt
#sudo rabbitmqadmin -u guest -p guest -V / declare exchange name=myexchange type=topic

# Create a Queue
sudo rabbitmqadmin -u guest -p guest -V / declare queue name=myqueue durable=false auto_delete=true

#BIND QUEUE TO EXCHANGE WITH ROUTHING_KEY SPECIFICATION (MANDANTORY) 
rabbitmqadmin -u guest -p guest -V / declare binding source=amq.topic destination=myqueue routing_key=topicname

#To check if the queues were actually created, execute:
$ sudo rabbitmqctl list_queues
Listing queues
myqueue      0

Setup the message_converter_broker: 
-----------------------------------

#msg_broker_proto_lib: /opt/nvidia/deepstream/deepstream/lib/libnvds_amqp_proto.so

#msg_broker_conn_str: <host;port;username;password>

#msg_conv_config: /opt/nvidia/deepstream/deepstream/sources/apps/sample_apps/deepstream-test4/dstest4_msgconv_config.txt

#topic: <topic_name>

#msg_broker_config: /opt/nvidia/deepstream/deepstream/sources/libs/amqp_protocol_adaptor/cfg_amqp.txt

Open the Rabbitmq managemer:
http://localhost:15672

ipcam uri: rtsp://admin:12345678abc@192.168.68.27/cam/realmonitor?channel=1&subtype=0
----------------------------

http://<url>:15672/

sending message from localhost to cloud
----------------------------------------
$ cd cloud-based/python
$ python3 event_transfer.py 


